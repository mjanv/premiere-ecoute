<Layouts.app flash={@flash} current_scope={assigns[:current_scope] || %{}} current_page="my_sessions">
  <div class="synthwave-bg min-h-screen text-white">
    
<!-- Page Header -->
    <div class="pt-12">
      <div class="max-w-7xl mx-auto px-2">
        <.page_header
          title={@listening_session.album.name}
          subtitle={@listening_session.album.artist}
        />
      </div>
    </div>

<!-- Main Content -->
    <div class="flex h-screen max-w-7xl mx-auto px-6">
      <!-- Left Column - Session & Album Details (1/3) -->
      <div class="w-1/3 p-6 overflow-y-auto">
        <%= if @listening_session.album do %>
          
<!-- Session Information -->
          <div class="rounded-xl p-6 mb-6 bg-gradient-to-br from-pink-900/80 to-purple-900/80">
            <div class="flex items-center space-x-3 mb-4">
              <div class="flex items-center w-full">
                <.status_badge status={Atom.to_string(@listening_session.status)} size="sm">
                   {gettext("Vote Format")}: {vote_type_display(@listening_session)}
                </.status_badge>
                <div class="flex-1"></div>
                <.status_badge status={Atom.to_string(@listening_session.status)} size="sm" />
              </div>
            </div>

            <div class="space-y-3">
              <%= if @show[:scores] do %>
                <!-- Main Score Stats -->
                <div class="grid grid-cols-2 gap-4 mb-4">
                  <div class="text-center bg-white/20 rounded-lg p-3">
                    <div class="text-2xl font-bold text-white">
                      <.async_result :let={report} assign={@report}>
                        <:loading>--</:loading>
                        <:failed>--</:failed>
                        <%= case session_average_score(report) do %>
                          <% score when is_number(score) and score > 0 -> %>
                            {score}<span class="text-lg text-purple-200">/10</span>
                          <% score when is_binary(score) and score != "N/A" -> %>
                            {score}
                          <% _ -> %>
                            --
                        <% end %>
                      </.async_result>
                    </div>
                    <div class="text-xs text-purple-200 font-medium">{gettext("Viewers")}</div>
                  </div>

                  <div class="text-center bg-white/20 rounded-lg p-3">
                    <div class="text-2xl font-bold text-white">
                      <.async_result :let={report} assign={@report}>
                        <:loading>--</:loading>
                        <:failed>--</:failed>
                        <%= case session_streamer_score(report) do %>
                          <% score when is_number(score) and score > 0 -> %>
                            {score}<span class="text-lg text-purple-200">/10</span>
                          <% score when is_binary(score) and score != "N/A" -> %>
                            {score}
                          <% _ -> %>
                            --
                        <% end %>
                      </.async_result>
                    </div>
                    <div class="text-xs text-purple-200 font-medium">{gettext("Streamer")}</div>
                  </div>
                </div>
              <% end %>

              <%= if @show[:votes] do %>
                <!-- Vote Stats -->
                <div class="grid grid-cols-2 gap-4 mb-4">
                  <div class="text-center bg-white/20 rounded-lg p-3">
                    <div class="text-xl font-bold text-white">
                      <.async_result :let={report} assign={@report}>
                        <:loading>--</:loading>
                        <:failed>--</:failed>
                        {session_total_votes(report)}
                      </.async_result>
                    </div>
                    <div class="text-xs text-purple-200 font-medium">
                      {gettext("Total Votes")}
                    </div>
                  </div>

                  <div class="text-center bg-white/20 rounded-lg p-3">
                    <div class="text-xl font-bold text-white">
                      <.async_result :let={report} assign={@report}>
                        <:loading>--</:loading>
                        <:failed>--</:failed>
                        {session_unique_voters(report)}
                      </.async_result>
                    </div>
                    <div class="text-xs text-purple-200 font-medium">
                      {gettext("Unique Voters")}
                    </div>
                  </div>
                </div>
              <% end %>
              
<!-- AIDEV-NOTE: Display toggles section - Blended styling -->
              <div class="mt-4 pt-4">
                <div class="flex justify-center space-x-6">
                  <div class="flex items-center">
                    <label class="flex items-center cursor-pointer">
                      <input type="checkbox" phx-click="toggle" phx-value-flag="votes" checked={@show[:votes]} class="sr-only" />
                      <div class={[
                        "relative inline-flex h-5 w-9 rounded-full transition-colors duration-200 ease-in-out mr-3",
                        if(@show[:votes], do: "bg-purple-500", else: "bg-white/20")
                      ]}>
                        <span class={[
                          "inline-block h-4 w-4 transform rounded-full bg-white shadow-md transition duration-200 ease-in-out translate-y-0.5",
                          if(@show[:votes], do: "translate-x-4", else: "translate-x-0.5")
                        ]}>
                        </span>
                      </div>
                      <span class="text-purple-200 text-sm font-medium">
                        {gettext("Display votes")}
                      </span>
                    </label>
                  </div>
                  <div class="flex items-center">
                    <label class="flex items-center cursor-pointer">
                      <input type="checkbox" phx-click="toggle" phx-value-flag="scores" checked={@show[:scores]} class="sr-only" />
                      <div class={[
                        "relative inline-flex h-5 w-9 rounded-full transition-colors duration-200 ease-in-out mr-3",
                        if(@show[:scores], do: "bg-purple-500", else: "bg-white/20")
                      ]}>
                        <span class={[
                          "inline-block h-4 w-4 transform rounded-full bg-white shadow-md transition duration-200 ease-in-out translate-y-0.5",
                          if(@show[:scores], do: "translate-x-4", else: "translate-x-0.5")
                        ]}>
                        </span>
                      </div>
                      <span class="text-purple-200 text-sm font-medium">
                        {gettext("Display scores")}
                      </span>
                    </label>
                  </div>
                </div>
              </div>
              
<!-- AIDEV-NOTE: Overlay link section with dropdown selector -->
              <div class="mt-4 pt-4 border-t border-white/20" id="overlay-hooks" phx-hook="CopyToClipboard">
                <div class="relative">
                  <div class="absolute left-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2 z-10">
                    <span class="text-xs text-purple-200 font-medium">{gettext("Overlay")}</span>
                    <form phx-change="change_overlay_score_type" class="flex items-center">
                      <select
                        name="score_type"
                        value={@overlay_score_type}
                        class="text-xs text-purple-200 font-medium bg-transparent border-none focus:outline-none cursor-pointer w-20"
                      >
                        <option value="streamer" class="bg-gray-800 text-white">Streamer</option>
                        <option value="viewer" class="bg-gray-800 text-white">Viewer</option>
                        <option value="both" class="bg-gray-800 text-white">Both</option>
                      </select>
                    </form>
                    <div class="w-px h-4 bg-white/20"></div>
                  </div>
                  <input
                    type="text"
                    readonly
                    value={get_current_overlay_url(@socket.host_uri, @listening_session.id, @overlay_score_type)}
                    class="w-full bg-white/10 border border-white/20 rounded-lg pl-40 pr-20 py-2 text-white text-xs font-mono focus:outline-none focus:ring-2 focus:ring-purple-500"
                    id={"overlay-url-input-#{@overlay_score_type}"}
                  />
                  <div class="absolute right-1 top-1 bottom-1 flex space-x-1">
                    <div id="open-url-hook" phx-hook="OpenUrl">
                      <button
                        phx-click="open_overlay"
                        class="bg-purple-600 hover:bg-purple-700 text-white px-2 py-1 rounded transition-colors flex items-center justify-center h-full"
                        title={gettext("Open overlay in new tab")}
                      >
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                          />
                        </svg>
                      </button>
                    </div>
                    <button
                      phx-click="copy_overlay_url"
                      class="bg-gray-600 hover:bg-gray-700 text-white px-2 py-1 rounded transition-colors flex items-center justify-center h-full"
                      title={gettext("Copy overlay URL")}
                    >
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              
<!-- AIDEV-NOTE: Session control buttons for start/end listening session -->
              <div class="mt-4 pt-4 border-t border-white/20">
                <div class="flex space-x-2">
                  <%= if @listening_session.status == :preparing do %>
                    <button
                      phx-click="start_session"
                      class="flex-1 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white py-2 px-4 rounded-lg font-medium transition-all duration-200 text-sm flex items-center justify-center space-x-2 shadow-md hover:shadow-lg"
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path
                          fill-rule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      <span>{gettext("Start Session")}</span>
                    </button>
                  <% end %>

                  <%= if @listening_session.status == :active do %>
                    <button
                      phx-click="stop_session"
                      class="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-medium transition-colors text-sm flex items-center justify-center space-x-2"
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path
                          fill-rule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 000 2h4a1 1 0 100-2H8z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      <span>{gettext("End Session")}</span>
                    </button>
                  <% end %>

                  <%= if @listening_session.status == :stopped do %>
                    <div class="flex-1 bg-gray-600 text-gray-300 py-2 px-4 rounded-lg font-medium text-sm flex items-center justify-center space-x-2 cursor-not-allowed">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path
                          fill-rule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H7zM14 9a1 1 0 10-2 0v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1h-1z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      <span>{gettext("Session Ended")}</span>
                    </div>
                  <% end %>
                </div>
              </div>

            </div>
          </div>
          
<!-- Album Information - Compact Design -->
          <div class=" rounded-xl p-4">
            <div class="flex items-start space-x-4">
              <!-- Album Cover -->
              <div class="flex-shrink-0">
                <%= if @listening_session.album.cover_url do %>
                  <img
                    src={@listening_session.album.cover_url}
                    alt={"#{@listening_session.album.name} cover"}
                    class="w-36 h-36 rounded-lg shadow-lg"
                  />
                <% else %>
                  <div class="w-36 h-36 bg-white/20 rounded-lg flex items-center justify-center">
                    <svg class="w-16 h-16 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" />
                    </svg>
                  </div>
                <% end %>
              </div>
              
<!-- Album Info -->
              <div class="flex-1 min-w-0">
                <h2 class="text-lg font-bold text-white mb-1 truncate">
                  {@listening_session.album.name}
                </h2>
                <p class="text-purple-100 mb-3 truncate">{@listening_session.album.artist}</p>

                <div class="grid grid-cols-3 gap-3 text-xs">
                  <div>
                    <span class="text-purple-200 block">{gettext("Released")}</span>
                    <span class="font-medium text-white">
                      {if @listening_session.album.release_date,
                        do: Calendar.strftime(@listening_session.album.release_date, "%-d %b %Y"),
                        else: gettext("Unknown")}
                    </span>
                  </div>
                  <div>
                    <span class="text-purple-200 block">{gettext("Tracks")}</span>
                    <span class="font-medium text-white">{@listening_session.album.total_tracks}</span>
                  </div>
                  <div>
                    <span class="text-purple-200 block">{gettext("Duration")}</span>
                    <span class="font-medium text-white">
                      {total =
                        (@listening_session.album.tracks || [])
                        |> Enum.map(&(&1.duration_ms || 0))
                        |> Enum.sum()
                        |> div(60_000)

                      "#{total}min"}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
      
<!-- Right Column - Track List (2/3) -->
      <div class="w-2/3 p-6 overflow-y-auto">
        
<!-- Session Controls - Only show when session is active -->
        <%= if @listening_session.status == :active do %>
          <div class="rounded-xl p-6 mb-6 bg-gradient-to-br from-purple-900/80 to-pink-900/80">
            <div class="grid grid-cols-2 gap-4">
              <!-- AIDEV-NOTE: Spotify Player LiveComponent -->
              <div>
                <.live_component
                  module={PremiereEcouteWeb.Sessions.Components.SpotifyPlayer}
                  id="spotify-player"
                  listening_session={@listening_session}
                  player_state={@player_state}
                  current_user={@current_user}
                  current_scope={@current_scope}
                />
              </div>
              
<!-- Poll Controls -->
              <div class="space-y-3">
                <div class="flex items-center justify-between">
                  <h4 class="text-sm font-medium text-purple-300 uppercase tracking-wide">
                    Twitch
                  </h4>
                  <div class="flex items-center space-x-2">
                    <%= if assigns[:poll_active] do %>
                      <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>
                      <span class="text-xs text-purple-400">{gettext("Active Poll")}</span>
                    <% else %>
                      <div class="w-2 h-2 bg-gray-500 rounded-full"></div>
                      <span class="text-xs text-gray-500">{gettext("No Poll")}</span>
                    <% end %>
                  </div>
                </div>
                
<!-- Poll Status -->
                <div class="bg-white/5 rounded-lg p-3 space-y-2">
                  <%= if assigns[:poll_active] do %>
                    <div class="flex items-center justify-between">
                      <span class="text-xs text-gray-400">{gettext("Poll Status:")}</span>
                      <span class="text-xs text-purple-400 font-medium">
                        {gettext("Running")}
                      </span>
                    </div>
                    <div class="flex items-center justify-between">
                      <span class="text-xs text-gray-400">{gettext("Total Votes:")}</span>
                      <span class="text-xs text-white font-medium">
                        {assigns[:poll_votes] || 0}
                      </span>
                    </div>
                    <%= if assigns[:poll_time_remaining] do %>
                      <div class="flex items-center justify-between">
                        <span class="text-xs text-gray-400">{gettext("Time Left:")}</span>
                        <span class="text-xs text-purple-400 font-medium">
                          {PremiereEcouteCore.Duration.timer(@poll_time_remaining)}
                        </span>
                      </div>
                    <% end %>
                  <% else %>
                    <%= if assigns[:poll_terminated] do %>
                      <div class="flex items-center justify-between">
                        <span class="text-xs text-gray-400">{gettext("Last Poll:")}</span>
                        <span class="text-xs text-gray-400 font-medium">
                          {gettext("Completed")}
                        </span>
                      </div>
                      <div class="flex items-center justify-between">
                        <span class="text-xs text-gray-400">{gettext("Final Votes:")}</span>
                        <span class="text-xs text-white font-medium">
                          {assigns[:last_poll_votes] || 0}
                        </span>
                      </div>
                    <% else %>
                      <p class="text-xs text-gray-400 text-center">
                        {gettext("No poll running")}
                      </p>
                    <% end %>
                  <% end %>
                </div>

                <div class="flex space-x-2">
                  <button
                    phx-click="start_poll"
                    disabled
                    class="flex-1 bg-gray-600 text-gray-400 py-2 px-3 rounded-lg font-medium text-sm flex items-center justify-center space-x-2 cursor-not-allowed opacity-50"
                  >
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path
                        fill-rule="evenodd"
                        d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>{gettext("Start Poll")}</span>
                  </button>
                  <button
                    phx-click="stop_poll"
                    disabled
                    class="flex-1 bg-gray-600 text-gray-400 py-2 px-3 rounded-lg font-medium text-sm flex items-center justify-center space-x-2 cursor-not-allowed opacity-50"
                  >
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 000 2h4a1 1 0 100-2H8z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>{gettext("Stop Poll")}</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        <% end %>
        
<!-- AIDEV-NOTE: Compact Streamer Voting Section - Only show when session is active -->
        <%= if @listening_session.status == :active do %>
          <div class="rounded-xl p-3 mb-6 bg-purple-900/20">
            <div class="flex items-center justify-center space-x-3">
              <span class="text-s text-white-300 whitespace-nowrap">
                {gettext("Your rating")}
              </span>
              <div class="flex space-x-1">
                <%= for rating <- session_vote_options(@listening_session) do %>
                  <button
                    phx-click="vote_track"
                    phx-value-rating={rating}
                    class={[
                      "px-2 py-1 text-sm rounded border transition-colors min-w-[32px]",
                      if(@listening_session.current_track,
                        do: [
                          "bg-gray-700 border-gray-600 text-gray-300 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300",
                          if(assigns[:user_current_rating] == rating,
                            do: "bg-purple-600 border-purple-500 text-white",
                            else: ""
                          )
                        ],
                        else: "bg-gray-800 border-gray-700 text-gray-600 cursor-not-allowed opacity-50"
                      )
                    ]}
                    disabled={!@listening_session.current_track}
                  >
                    {rating}
                  </button>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>

        <div class="mb-6">
          <%= if @listening_session.album && length(@listening_session.album.tracks || []) > 0 do %>
            <div class="space-y-3">
              <%= for {track, index} <- Enum.with_index(@listening_session.album.tracks, 1) do %>
                <div
                  class={[
                    "rounded-lg transition-colors overflow-hidden",
                    if(
                      @listening_session.current_track &&
                        @listening_session.current_track.id == track.id,
                      do: "border-2 border-green-500/50",
                      else: "hover:bg-gray-700"
                    )
                  ]}
                  style={
                    if(
                      @listening_session.current_track &&
                        @listening_session.current_track.id == track.id,
                      do: "",
                      else: "background-color: var(--color-dark-900);"
                    )
                  }
                >
                  <!-- Track Row with Green Background -->
                  <div class={[
                    "p-4 transition-colors",
                    if(
                      @listening_session.current_track &&
                        @listening_session.current_track.id == track.id,
                      do: "bg-green-600/20 hover:bg-green-600/30",
                      else: ""
                    )
                  ]}>
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-4 flex-1 min-w-0">
                        <%= if @listening_session.current_track && @listening_session.current_track.id == track.id do %>
                          <div class="w-8 flex-shrink-0 flex items-center justify-center">
                            <svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                              <path
                                fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
                                clip-rule="evenodd"
                              />
                            </svg>
                          </div>
                        <% else %>
                          <span class="text-lg text-gray-400 w-8 flex-shrink-0">{index}</span>
                        <% end %>
                        <div class="flex-1 min-w-0">
                          <h4 class={[
                            "font-medium text-lg truncate",
                            if(
                              @listening_session.current_track &&
                                @listening_session.current_track.id == track.id,
                              do: "text-green-300",
                              else: "text-white"
                            )
                          ]}>
                            {track.name}
                          </h4>
                          <%= if track.duration_ms do %>
                            <p class={[
                              "text-sm",
                              if(
                                @listening_session.current_track &&
                                  @listening_session.current_track.id == track.id,
                                do: "text-green-400",
                                else: "text-gray-400"
                              )
                            ]}>
                              {PremiereEcouteCore.Duration.timer(track.duration_ms)}
                            </p>
                          <% end %>
                        </div>
                      </div>

                      <div class="flex items-center space-x-8 text-sm flex-shrink-0">
                        <%= if @show[:votes] do %>
                          <div class="text-center">
                            <p class="text-xl font-bold text-purple-300">
                              <.async_result :let={report} assign={@report}>
                                <:loading>--</:loading>
                                <:failed>--</:failed>
                                {track_votes_count(track.id, report)}
                              </.async_result>
                            </p>
                            <p class="text-purple-400/70">{gettext("Votes")}</p>
                          </div>
                        <% end %>
                        <%= if @show[:scores] do %>
                          <div class="text-center">
                            <p class="text-xl font-bold text-pink-300">
                              <.async_result :let={report} assign={@report}>
                                <:loading>--</:loading>
                                <:failed>--</:failed>
                                <%= case track_score(track.id, report) do %>
                                  <% "N/A" -> %>
                                    <span class="text-gray-500">--</span>
                                  <% score -> %>
                                    {score}
                                <% end %>
                              </.async_result>
                            </p>
                            <p class="text-pink-400/70">{gettext("Score")}</p>
                          </div>
                          <div class="text-center">
                            <p class="text-xl font-bold text-emerald-300">
                              <.async_result :let={report} assign={@report}>
                                <:loading>--</:loading>
                                <:failed>--</:failed>
                                <%= case track_streamer_score(track.id, report) do %>
                                  <% "N/A" -> %>
                                    <span class="text-gray-500">--</span>
                                  <% score -> %>
                                    {score}
                                <% end %>
                              </.async_result>
                            </p>
                            <p class="text-emerald-400/70">{gettext("My Score")}</p>
                          </div>
                        <% end %>
                      </div>
                    </div>
                  </div>
                  
<!-- AIDEV-NOTE: Histogram Section - show for current track when active, or all tracks when session ended -->
                  <%= if (@listening_session.current_track && @listening_session.current_track.id == track.id) || @listening_session.status == :stopped do %>
                    <div class="px-4 pt-4 pb-2 bg-gradient-to-br from-slate-900/30 to-gray-900/30 border-t border-slate-500/20">
                      <!-- Horizontal Histogram taking ~80% width -->
                      <div class="flex items-end justify-center h-32 mx-auto w-4/5">
                        <.async_result :let={report} assign={@report}>
                          <:loading>
                            <%= for rating <- session_vote_options(@listening_session) do %>
                              <div class="flex-1 flex flex-col items-center px-1">
                                <div class="w-full bg-gray-600 rounded-t animate-pulse" style="height: 8px"></div>
                                <span class="text-xs text-gray-400 font-medium mt-1">
                                  {rating}
                                </span>
                              </div>
                            <% end %>
                          </:loading>
                          <:failed>
                            <%= for rating <- session_vote_options(@listening_session) do %>
                              <div class="flex-1 flex flex-col items-center px-1">
                                <div class="w-full bg-red-600 rounded-t" style="height: 6px"></div>
                                <span class="text-xs text-gray-400 font-medium mt-1">
                                  {rating}
                                </span>
                              </div>
                            <% end %>
                          </:failed>
                          <%= for {rating, votes} <- track_vote_distribution(track.id, report, @listening_session) do %>
                            <div class="flex-1 flex flex-col items-center px-1">
                              <!-- Vote count above bar (on the roof) -->
                              <%= if votes > 0 do %>
                                <span class="text-xs font-medium text-white mb-1">
                                  {votes}
                                </span>
                              <% end %>
                              
<!-- Bar (the building) -->
                              <div
                                class={
                                  [
                                    "w-full rounded-t transition-all duration-300 min-w-0",
                                    vote_option_color(rating, @listening_session),
                                    # Highlight most voted rating dynamically
                                    if(votes > 0 && votes == track_max_votes(track.id, report, @listening_session),
                                      do: "ring-2 ring-white/50",
                                      else: ""
                                    )
                                  ]
                                }
                                style={"height: #{max(votes * 8, 6)}px"}
                              >
                              </div>
                              
<!-- Rating number -->
                              <span class="text-xs text-gray-400 font-medium mt-1">
                                {rating}
                              </span>
                            </div>
                          <% end %>
                        </.async_result>
                      </div>
                    </div>
                  <% end %>
                </div>
              <% end %>
            </div>
          <% else %>
            <div class="text-center py-16 text-gray-400">
              <svg class="w-16 h-16 mx-auto mb-4 opacity-50" fill="currentColor" viewBox="0 0 20 20">
                <path d="M18 3a1 1 0 00-1.196-.98L3 6.687a1 1 0 000 1.838l4.49 1.497L9.5 14.75a1 1 0 001.838 0L15.014 10H18a1 1 0 001-1V4a1 1 0 00-1-1z" />
              </svg>
              <p>{gettext("No tracks found for this album.")}</p>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</Layouts.app>
