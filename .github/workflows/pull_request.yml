name: Pull Request CI

on:
  pull_request:

jobs:
  deps:
    name: Setup and Dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Elixir and Erlang
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.19.0-otp-28'
          otp-version: '28.1'

      - name: Restore dependencies cache
        uses: actions/cache/restore@v4
        id: deps-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Compile dependencies and project
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix compile

      - name: Save dependencies cache
        if: steps.deps-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: deps

    steps:
      - uses: actions/checkout@v4

      - name: Set up Elixir and Erlang
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.19.0-otp-28'
          otp-version: '28.1'

      - name: Restore dependencies and build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Restore PLT cache
        uses: actions/cache@v4
        id: plt-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-plt-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-plt-

      - name: Create PLTs directory
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: mkdir -p priv/plts

      - name: Run quality checks
        run: mix quality

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: premiere_ecoute_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      MIX_ENV: test
      POSTGRES_DATABASE: premiere_ecoute_test
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOSTNAME: localhost
      POSTGRES_ENCRYPTION_KEY: dGVzdF9rZXlfMzJfYnl0ZXNfX19fX19fX19fX19fX18=
      SPOTIFY_CLIENT_ID: fake_spotify_client_id
      SPOTIFY_CLIENT_SECRET: fake_spotify_client_secret
      SPOTIFY_REDIRECT_URI: http://localhost:4000/auth/spotify/callback
      TWITCH_CLIENT_ID: fake_twitch_client_id
      TWITCH_CLIENT_SECRET: fake_twitch_client_secret
      TWITCH_REDIRECT_URI: http://localhost:4000/auth/twitch/callback
      TWITCH_WEBHOOK_CALLBACK_URL: http://localhost:4000/webhooks/twitch
      TWITCH_EXTENSION_SECRET: dGVzdF9zZWNyZXRfa2V5X2Zvcl90d2l0Y2hfZXh0ZW5zaW9u
      AUTH_USERNAME: admin
      AUTH_PASSWORD: test_password
      RESEND_API_KEY: fake_resend_api_key
      SENTRY_DSN: https://fake@sentry.io/123456
      OPENAI_API_KEY: sk-proj-3Qd9_ItzEYh0eu0aJH_v1ZTr8x5EsFsgPHN2McIUHkRmOGW7BOBF57

    steps:
      - uses: actions/checkout@v4

      - name: Set up Elixir and Erlang
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.19.0-otp-28'
          otp-version: '28.1'

      - name: Restore dependencies and build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Run tests
        run: mix test

  # AIDEV-NOTE: Extension unit tests with Jest - runs in parallel with backend tests
  # Depends on quality job to run in parallel with tests job
  extension-tests:
    name: Extension Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: apps/extension/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/extension/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install extension dependencies
        working-directory: apps/extension
        run: npm ci

      - name: Run extension tests
        working-directory: apps/extension
        run: npm test
